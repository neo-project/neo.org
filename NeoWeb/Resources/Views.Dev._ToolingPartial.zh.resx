<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Allows developers to code and compile smart contracts via web interface and deploy them to a TestNet without having to install any other development tools. NeoCompiler Eco currently supports C# for compiling, deployment and testing." xml:space="preserve">
    <value>开发人员无需安装任何其它开发工具，即可通过 Web 界面对智能合约进行编码和编译，并部署到测试网。NeoCompiler Eco 当前支持 C# 智能合约的编译，部署和测试功能。</value>
  </data>
  <data name="Boa is a compiler for smart contracts written in Python. Designed to feel as natural as possible for Python developers, Boa contracts are assisted with decorators, helper functions, type hints, and support testing against the core VM TestEngine. Debug data generated by the compiler also follows the standard format, enabling debugging through the Neo Blockchain Toolkit." xml:space="preserve">
    <value>Boa 是 Python 智能合约编译器，旨在为开发者提供原生的 Python 开发体验。它提供装饰器、助记函数和类型高亮提示，并支持对核心 VM TestEngine 的测试。编译器生成的调试数据遵循标准格式，可以通过 Neo Blockchain Toolkit 进行调试。</value>
  </data>
  <data name="dApp Integration" xml:space="preserve">
    <value>dAPP 集成</value>
  </data>
  <data name="Dora is a high speed block explorer with N3 and Neo Legacy integrations. A public API is also exposed, allowing developers to easily acquire information about supported blockchains including chain stats, contract storage, and more." xml:space="preserve">
    <value>Dora 是一款高性能区块浏览器，同时支持 N3 和 Neo Legacy。除此之外，Dora 还公开了一套 API，允许开发者轻松获取区块链信息，包括链上统计数据、合约存储数据等。</value>
  </data>
  <data name="Explorers" xml:space="preserve">
    <value>浏览器</value>
  </data>
  <data name="Mamba is an SDK for Neo that is intended as the main point of entry for Python developers wishing to interact with the blockchain. The library includes a number of packages and convenience modules for handling network connectivity, data storage, cryptography, and complex data types specific to N3. Smart contract execution and basic node functionality is now also available." xml:space="preserve">
    <value>作为 Neo 的另一个 SDK 实现，Mamba 旨在作为 Python 开发人员与区块链进行交互的主要切入点。该库包括许多用于处理区块链连接、数据存储、密码学和 N3 特定的复杂数据类型的软件包和模块，同时也提供了智能合约执行和基本节点功能。</value>
  </data>
  <data name="Neo node which is implemented in Python." xml:space="preserve">
    <value>通过 Python 实现的高性能 Neo 节点。</value>
  </data>
  <data name="Neo Playground is a VS Code-based IDE pre-installed with all the tools needed to develop Neo dApps without leaving the browser. Intended to help onboard developers, the platform makes it easy to spawn temporary development environments for Java, C#, Go, or other supported languages where contracts can be written, deployed, and tested." xml:space="preserve">
    <value>Neo Playground 是一个基于 VS Code 的 Web IDE，预装了 Neo 相关的各类合约和工具教程。为了帮助新手开发人员，该平台可以轻松地为 Java、C#、Go 或其他支持的语言创建临时开发环境，在这里可以编写、部署和测试合约。</value>
  </data>
  <data name="Neo RPC SDK is a dependency library used to streamline the integration of C# applications with Neo. Well suited for games, wallets, and other projects, the RPC SDK makes it easy to construct transactions, invoke RPC interfaces, and call deployed contracts." xml:space="preserve">
    <value>Neo RPC SDK 是一个用于简化 C# 应用程序与 Neo 集成的依赖库。该 SDK 支持构建交易、调用 RPC 接口和调用链上合约等功能，适合于区块链游戏、钱包和 dApp 的开发。</value>
  </data>
  <data name="NEO Tracker is a blockchain explorer with an included web wallet, making it easy to look up transaction history or perform transfers. The site also provides information pages for assets, smart contracts, and a MoonPay fiat ramp integration." xml:space="preserve">
    <value>NEO Tracker 是一个带有 Web 钱包的区块链资源管理器，可轻松查找区块链历史记录或执行资产转账。该网站还提供 Neo 链上的资产和智能合约相关信息，并且以 MoonPay 深度集成。</value>
  </data>
  <data name="Neo-bench is a benchmarking tool for testing and comparing the performance of different Neo blockchain node implementations. It makes it easy to test the throughput, CPU usage, and memory consumption across single and multi-node setups." xml:space="preserve">
    <value>Neo-bench 是一款标准测试工具，用于测试和比较不同 Neo 区块链节点实现的性能。它可以轻松测试单节点和多节点设置之间的吞吐量、CPU 使用率和内存消耗。</value>
  </data>
  <data name="Neo-CLI is the reference Neo implementation, a headless node with reliable performance and the full range of core functionality. Designed with application integration in mind, the node can be outfitted with custom logic via plugin modules." xml:space="preserve">
    <value>Neo-CLI 作为 Neo 的参考实现，是一个性能可靠、核心功能齐全的命令行节点。为了方便的应用集成，该节点可以通过插件完成自定义扩展。</value>
  </data>
  <data name="Neo-Express is a privatenet optimized for development scenarios. It is built on the same neo platform core as neo-cli and neo-gui to maximize compatibility between local development and public chain environments." xml:space="preserve">
    <value>Neo-Express 是专为开发场景优化的私有链。它与 neo-cli 和 neo-gui 建立在相同的 neo 平台核心上，最大限度地提高了本地开发与公共链环境之间的兼容性。</value>
  </data>
  <data name="Neo-gogogo is a lightweight Go SDK that provides all the structures and methods required to interface with the Neo blockchain. All the necessary tools are available for any kind of application, making it easy to manage wallets, verify state proofs, interact with contracts and tokens, build transactions, send RPC requests, and more." xml:space="preserve">
    <value>Neo-gogogo 是一个轻量级的 Go SDK，提供了与 Neo 区块链交互所需的所有数据结构和方法，便于任何区块链应用所需的包括管理钱包，验证区块链状态，转账以及智能合约交互，构建交易，发送 RPC 请求等功能。</value>
  </data>
  <data name="Neo-GUI is a full-node Neo client, which contains all the basic functions of the Neo network. This node is designed for advanced users, with professional software interaction and extremely high security." xml:space="preserve">
    <value>Neo-GUI 是全节点 Neo 客户端，拥有 Neo 网络的所有基本功能。该节点主要面向需要专业的软件交互和极高的安全性需求的深度用户。</value>
  </data>
  <data name="NeoFS API Go implements all of the core NeoFS components needed to help applications to integrate with NeoFS via its Protobuf-based API." xml:space="preserve">
    <value>NeoFS API Go 为帮助应用程序更简易的通过 API 与 NeoFS 交互，提供了其所必需的所有 NeoFS 核心组件的功能。</value>
  </data>
  <data name="NeoFS DevEnv is a set of tools created to simplify the creation of local NeoFS storage networks, complete with an integrated N3 private network. S3 and HTTPS gateway services are also included to facilitate easy testing of NeoFS-based applications." xml:space="preserve">
    <value>NeoFS Dev Env 作为一套本地开发测试工具，为开发者简化了本地 NeoFS 存储网络的创建，并配有集成的 Neo|N3 私链。除此之外，它还提供 S3 和 HTTPS 网关服务，以方便测试基于 NeoFS 的应用程序。</value>
  </data>
  <data name="NeoGo is a fully featured and well documented alternative implementation of the core Neo stack, written in Go. Provides a highly performant node implementation, a compiler for Go smart contracts, and an SDK for app integration." xml:space="preserve">
    <value>NeoGo 是以 Golang 实现的功能齐全、文档完善的另一个版本的 Neo 节点。NeoGo 集高性能的 Neo 节点、Go 智能合约编译器以及开发 app 的 SDK 于一体。</value>
  </data>
  <data name="NeoLine is a light wallet for Neo Legacy and N3, available in mobile, web, and Chrome extension versions. The wallet is intended to provide an easy to use solution for all users and includes a dAPI integration for connecting with dApps." xml:space="preserve">
    <value>NeoLine 是一款适用于 Neo Legacy 和 N3 的轻钱包，有移动端、电脑端和 Chrome 插件等多个版本。该钱包旨在为所有用户提供简易的钱包使用体验，并集成了与 dApp 交互的 dAPI。</value>
  </data>
  <data name="Neon-js is a JavaScript SDK with a lightweight library for Neo blockchain interaction. Designed for both backend and frontend use, the SDK is well suited for RPC interaction, wallet manipulation, and contract invoking. The NetworkFacade class provides a quick way to bootstrap developers for easily constructing an interaction." xml:space="preserve">
    <value>neon-js 是用于与 Neo 区块链进行交互的轻量级 JavaScript SDK。为支持 JS/TS 的前端以及后端开发，该 SDK 具备与 Neo 节点 RPC 交互，操作钱包以及调用合约的功能。初次之外，通过 Network Facade 为开发者提供一种更快捷的区块链交易构建方式。</value>
  </data>
  <data name="NeoTube is a reliable Neo block explorer with seperate versions for Neo Legacy and N3. Network statistics, fungible and non-fungible assets, and contract lists are all provided." xml:space="preserve">
    <value>NeoTube 是一款可靠的 Neo 区块浏览器，同时针对 Neo Legacy 和 N3 提供 Neo 区块链的数据统计、智能合约列表和相关数据，同质资产以及非同质代资产。</value>
  </data>
  <data name="Neow3j is a Java library that aims to provide easy and reliable integration with Neo nodes. It supports Neo RPC, asset transfers, smart contract invocations and deployments, NEP-2, NEP-6, building, signing and sending raw transactions, and more." xml:space="preserve">
    <value>Java SDK 作为 Neow3j 的核心模块之一，旨在为 Neo 节点提供轻便可靠的集成支持。为 Java 开发者提供 Neo 节点 RPC 功能调用、资产转帐、智能合约调用和部署、NEP-2、NEP-6、构建、签名和发送原始交易等功能。</value>
  </data>
  <data name="NEO•ONE is an end-to-end development framework for Neo applications created with TypeScript or JavaScript. Like the Blockchain Toolkit, it includes tools for local network setup, contract compiling and deploying, wallet handling, automated testing, and also provides client APIs to simplify interaction with deployed contracts." xml:space="preserve">
    <value>NEO·ONE 是一个端到端 dApp 开发框架，适用于 TypeScript 或 JavaScript 创建的 Neo 应用。与 Neo Blockchain Toolkit 一样，它包括本地私链部署、合约编译和部署、钱包交互、自动化测试等工具，还提供了客户端 API 来简化与链上合同的交互。</value>
  </data>
  <data name="Node Monitor is a Neo network status monitor which tracks availability for popular public RPC nodes or REST endpoints. Developers can use these community-maintained nodes to interact with the Neo network without needing to run their own node." xml:space="preserve">
    <value>Neo Monitor 是一个 Neo 网络状态监视器，可监控公开的 RPC 节点或 REST 端点的可用性。开发人员可以使用这些社区维护的节点和 Neo 网络进行交互，而无需运行自己的节点。</value>
  </data>
  <data name="Nodes" xml:space="preserve">
    <value>节点</value>
  </data>
  <data name="One of the three main components of the Neow3j library, the compiler provides the means to turn Java contracts into the NEF and manifest files required for deployment on N3 networks. A Gradle plugin is provided to aid compilation, which will also produce standard debugging information by default." xml:space="preserve">
    <value>作为 Neow3j 库的三个主要组件之一，该编译器提供了将 Java 合约转化为 N3 网络部署所需的 NEF 和 manifest 文件的功能。开发者可以通过 Gradle 插件来引入使用该编译器，默认情况下还将生成标准的合约调试信息。</value>
  </data>
  <data name="SDK" xml:space="preserve">
    <value>SDK</value>
  </data>
  <data name="Smart Contract Compilers" xml:space="preserve">
    <value>合约编译器</value>
  </data>
  <data name="Smart Contract Dev &amp; Debug" xml:space="preserve">
    <value>合约开发与调试</value>
  </data>
  <data name="The core neo devpack for dotnet provides all the tools required to compile smart contracts written in C#. In addition to producing deployable NEF contract files, the compiler also emits manifest files and debug information following a standard format for use in the Neo Debugger." xml:space="preserve">
    <value>该 Neo 开发包提供了编译 C# 智能合约所需的所有工具，该工具可以编译 C# 智能合约，生成可部署的 NEF 和 manifest 文件、相关的调试信息，供 Neo 合约部署以及调试器使用。</value>
  </data>
  <data name="The Neo Blockchain Toolkit is a one-stop-shop for creating and preparing smart contracts for production, seamlessly integrated with VS Code, the most popular code editor. Out of the box, developers can easily deploy private networks, compile, deploy, and invoke smart contracts, or tap into its fully integrated debugging experience. With time-travel debug support, a source-mapped opcode view, and an automated test harness, NBT provides a best-in-class blockchain development experience." xml:space="preserve">
    <value>Neo Blockchain Toolkit 为一款与 VS Code 无缝集成的合约编辑器，为开发和调试 Neo 智能合约提供一站式服务。作为一个开箱即用的工具，开发者可以轻松部署私有网络，编译、部署和调用智能合约，然后体验全方位支持的合约调试体验。通过时间旅行调试支持、源码映射的操作码视图和自动化测试工具，NBT 提供了一流的区块链开发体验。</value>
  </data>
  <data name="Tooling" xml:space="preserve">
    <value>工具集</value>
  </data>
  <data name="Welcome to OneGate -- One gate to the blockchain. OneGate Explorer is a fully functional, user-friendly, and constantly iterating N3 blockchain explorer website. It has full support for NEP-17 and NEP-11." xml:space="preserve">
    <value>欢迎来到 OneGate——通往区块链的大门。OneGate Explorer 是一个功能完善，界面友好，不断迭代的 N3 区块链浏览器网站。完整支持 NEP-17 和 NEP-11。</value>
  </data>
  <data name="You can use our default deployed images directly, see N3-Docker. The default node contains ApplicationLogs and RpcServer Plugins." xml:space="preserve">
    <value>你可以直接使用我们已经部署好的映像——N3-Docker。默认节点包含ApplicationLogs 和 RpcServer插件。</value>
  </data>
</root>