<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Base64 decoding:" xml:space="preserve">
    <value>Base64 解码：</value>
  </data>
  <data name="Base64 encoding:" xml:space="preserve">
    <value>Base64 编码：</value>
  </data>
  <data name="Base64 script hash to Neo 3 address:" xml:space="preserve">
    <value>Base64 脚本哈希转 Neo 3 地址：</value>
  </data>
  <data name="Base64 script hash to script hash (big-endian):" xml:space="preserve">
    <value>Base64 脚本哈希转脚本哈希（大端序）:</value>
  </data>
  <data name="Base64 script hash to script hash (little-endian):" xml:space="preserve">
    <value>Base64 脚本哈希转脚本哈希（小端序）:</value>
  </data>
  <data name="Base64 string to big integer:" xml:space="preserve">
    <value>Base64 格式的字符串转大整数：</value>
  </data>
  <data name="Base64 string to hexadecimal string:" xml:space="preserve">
    <value>Base64 格式的字符串转十六进制字符串：</value>
  </data>
  <data name="Big integer to Base64 string:" xml:space="preserve">
    <value>大整数转 Base64 字符串：</value>
  </data>
  <data name="Big integer to hexadecimal string:" xml:space="preserve">
    <value>大整数转十六进制字符串：</value>
  </data>
  <data name="Big-endian to little-endian:" xml:space="preserve">
    <value>大端序转小端序：</value>
  </data>
  <data name="Hexadecimal little-endian string to big integer:" xml:space="preserve">
    <value>16 进制小端序字符串转大整数：</value>
  </data>
  <data name="Hexadecimal little-endian string to UTF8 string:" xml:space="preserve">
    <value>16 进制小端序字符串转 UTF8 字符串：</value>
  </data>
  <data name="Hexadecimal private key to WIF private key:" xml:space="preserve">
    <value>16 进制私钥转 WIF 私钥：</value>
  </data>
  <data name="Little-endian to big-endian:" xml:space="preserve">
    <value>小端序转大端序：</value>
  </data>
  <data name="Neo 3 address to Base64 script hash:" xml:space="preserve">
    <value>Neo 3 地址转 Base64 脚本哈希：</value>
  </data>
  <data name="Neo 3 address to script hash (big-endian):" xml:space="preserve">
    <value>Neo 3 地址转脚本哈希（大端序）:</value>
  </data>
  <data name="Neo 3 address to script hash (little-endian):" xml:space="preserve">
    <value>Neo 3 地址转脚本哈希（小端序）:</value>
  </data>
  <data name="Private key to Neo3 address:" xml:space="preserve">
    <value>私钥转 Neo3 地址：</value>
  </data>
  <data name="Private key to public key:" xml:space="preserve">
    <value>私钥转公钥：</value>
  </data>
  <data name="Private key to script hash (big-endian):" xml:space="preserve">
    <value>私钥转脚本哈希（大端序）:</value>
  </data>
  <data name="Private key to script hash (little-endian):" xml:space="preserve">
    <value>私钥转脚本哈希（小端序）:</value>
  </data>
  <data name="Public key to Neo3 Address:" xml:space="preserve">
    <value>公钥转 Neo3 地址：</value>
  </data>
  <data name="Public key to script hash (big endian):" xml:space="preserve">
    <value>公钥转脚本哈希（大端序）:</value>
  </data>
  <data name="Public key to script hash (little endian):" xml:space="preserve">
    <value>公钥转脚本哈希（小端序）:</value>
  </data>
  <data name="Script hash to Neo3 address:" xml:space="preserve">
    <value>脚本哈希转 Neo3 地址：</value>
  </data>
  <data name="Smart contract script analysis:" xml:space="preserve">
    <value>智能合约脚本解析：</value>
  </data>
  <data name="UTF8 string to hexadecimal string:" xml:space="preserve">
    <value>UTF8 字符串转十六进制字符串：</value>
  </data>
</root>