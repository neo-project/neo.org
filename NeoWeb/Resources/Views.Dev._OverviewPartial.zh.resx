<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="A VS Code extension that provides frictionless edit-build-debug-deployment across PrivateNet, TestNet and MainNet. Learn how to get started and write your first Neo smart contract." xml:space="preserve">
    <value>Neo 区块链工具包是基于 Visual Studio Code 的一个扩展包，提供横跨私有链、测试网与主网的搭建 - 调试 - 部署全流程 Neo 智能合约开发无摩擦体验。学习如何开始编写你的第一个 Neo 智能合约。</value>
  </data>
  <data name="An introduction to commands in the command line node, including how to create a wallet, import and export private keys, transfer assets, start consensus, and more." xml:space="preserve">
    <value>命令行模式中各种命令的简介，包括如何创建钱包、导入和导出私钥、迁移资产，启动共识等等。</value>
  </data>
  <data name="An introduction to the NEP-17 token standard, which provides systems with a generalized interaction mechanism for tokenized smart contracts." xml:space="preserve">
    <value>NEP-17 通证标准的简介，该标准为各系统提供了一种标准化通证化智能合约交互方式。</value>
  </data>
  <data name="Develop a smart contract" xml:space="preserve">
    <value>开发智能合约</value>
  </data>
  <data name="Develop a smart contract with the Neo Blockchain Toolkit" xml:space="preserve">
    <value>使用 Neo 区块链工具包开发智能合约</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>文档</value>
  </data>
  <data name="Featured Tutorials" xml:space="preserve">
    <value>精选教学案例</value>
  </data>
  <data name="Find a comprehensive collection of tools and resources to help you build outstanding applications on the Neo blockchain." xml:space="preserve">
    <value>我们准备了完备的工具集与资源，助力开发者在 Neo 区块链上开发出色的应用。</value>
  </data>
  <data name="Getting familiar with Neo-CLI commands" xml:space="preserve">
    <value>了解 Neo-CLI 命令行</value>
  </data>
  <data name="GitHub" xml:space="preserve">
    <value>GitHub</value>
  </data>
  <data name="Introduction to NEO·ONE" xml:space="preserve">
    <value>了解 NEO-ONE</value>
  </data>
  <data name="Learn about N3 features" xml:space="preserve">
    <value>了解 N3 特性</value>
  </data>
  <data name="Learn how to set up a private network using Neo-GO, make RPC calls, and deploy a smart contract." xml:space="preserve">
    <value>了解如何使用 Neo-GO 建立私有网络，进行 RPC 调用并部署智能合约。</value>
  </data>
  <data name="Learn how to set up the NEO·ONE JavaScript framework, create a token, and integrate NEO·ONE into a dApp." xml:space="preserve">
    <value>了解如何设置 NEO·ONE JavaScript 框架，创建通证并将 NEO·ONE 集成到 dApp 中。</value>
  </data>
  <data name="Learn how to write a NEP-17 contract" xml:space="preserve">
    <value>学习如何编写 NEP-17 智能合约</value>
  </data>
  <data name="N3 TESTNET FAUCET (N3T4)" xml:space="preserve">
    <value>N3 测试币发放 (N3T4)</value>
  </data>
  <data name="N3 TESTNET FAUCET (N3T5)" xml:space="preserve">
    <value>N3 测试币发放 (N3T5)</value>
  </data>
  <data name="Neo Legacy TestNet faucet" xml:space="preserve">
    <value>Neo Legacy 测试网入口</value>
  </data>
  <data name="Oracle solutions enable blockchains to obtain external data from outside networks. Learn how to get started with Neo’s built-in Oracle service." xml:space="preserve">
    <value>预言机可以让区块链获取外部数据。学习如何使用 Neo 的内置预言机服务。</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>概览</value>
  </data>
  <data name="Set up a development chain" xml:space="preserve">
    <value>搭建开发链</value>
  </data>
  <data name="Smart contract development with Neo-GO" xml:space="preserve">
    <value>使用 Neo-GO 开发智能合约</value>
  </data>
  <data name="The basics of Neo’s native Oracle" xml:space="preserve">
    <value>Neo 内置预言机入门</value>
  </data>
  <data name="Tutorial" xml:space="preserve">
    <value>教学</value>
  </data>
  <data name="View All Tutorials" xml:space="preserve">
    <value>查看所有教学案例</value>
  </data>
</root>
