<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Contributors" xml:space="preserve">
    <value>贡献者</value>
  </data>
  <data name="Director of Enterprise Adoption" xml:space="preserve">
    <value>企业业务负责人</value>
  </data>
  <data name="Erik is the founder and a core developer of Neo, author of the dBFT consensus mechanism. He is an expert on blockchain technology and information security, as well as a strong advocate for open source development. He leads Neo's global developer communities to continuously innovate, apply and promote technology in the blockchain field. Currently he is leading the development of Neo3, enhancing the developer experience, to get ready for enterprise blockchain applications." xml:space="preserve">
    <value>张铮文是 Neo 的创始人和核心开发者，dBFT 共识机制的创造者。他是区块链技术和计算机安全方面的专家，也是开源文化的倡导者。在他的领导下，Neo 全球开发者社区在区块链领域不断进行技术创新、应用和推广。他目前正在主导 Neo3 的开发，旨在提升开发者体验，构建大规模区块链商业应用的基础。</value>
  </data>
  <data name="Founder and core developer of Neo, Chair of Neo Foundation" xml:space="preserve">
    <value>Neo 创始人与核心开发者，Neo 基金会主席</value>
  </data>
  <data name="Founder of Neo, Chair of Neo Foundation, CEO of NGD" xml:space="preserve">
    <value>Neo 创始人，Neo 基金会主席，NGD CEO</value>
  </data>
  <data name="Hongfei Da is the founder of Neo, a leading open source blockchain platform that is building the infrastructure of the next-gen Internet with a vision to create a smart economy. As a pioneer in the international blockchain technology space, he founded AntShares in 2014 which was later renamed to Neo in June 2017. Leveraging on his extensive experience and expertise in blockchain technologies and innovations, he is widely recognized as a pioneering and visionary leader in the global blockchain industry." xml:space="preserve">
    <value>达鸿飞是 Neo 的创始人。作为全球区块链技术领域的先行者，他于 2014 年创建了小蚁，并于 2017 年 6 月将小蚁更名为 Neo。作为领先的开源区块链平台，Neo 正在构建下一代互联网的基础设施，以实现智能经济的愿景。凭借在区块链技术和创新方面的丰富经验和专业知识，他已成为全球区块链行业的开拓者和有远见的领导者。</value>
  </data>
  <data name="John leads the Enterprise Strategy &amp; adoption and Neo Global Development in Seattle, WA, with a focus on the developer experience and tools. Previously he built and successfully exited two Machine Learning start-ups. Earlier in his career at Microsoft, John incubated and built Microsoft Digital from zero to $0.5B in revenue, and he led Architecture, Product, and Developer Engagement for the .NET platform v1. He has published a number of books on Software Architecture, and is currently working on a book on Decentralized Systems." xml:space="preserve">
    <value>John deVadoss 是 Neo 企业战略及应用业务和 NGD 西雅图的负责人，致力于开发工具和开发体验的提升。John 曾创立两家机器学习的创业公司并成功退出。在其微软供职期间，John 孵化了数字微软项目，并实现了其由零到五亿美元营收的突破性增长。他还主导并推动了 .NET 平台 V1 版本的架构设计，产品开发以及开发者互动。John 已经出版了多本软件架构相关的著作，目前他在创作一本分布式系统专题的书籍。</value>
  </data>
  <data name="Neo Community Outstanding Contributors" xml:space="preserve">
    <value>Neo 杰出社区贡献者</value>
  </data>
  <data name="Neo Core Developers" xml:space="preserve">
    <value>Neo 核心开发者</value>
  </data>
  <data name="Neo Foundation Key Members" xml:space="preserve">
    <value>Neo 基金会主要成员</value>
  </data>
  <data name="Neo Global Development (NGD) Key Members" xml:space="preserve">
    <value>NGD 主要成员</value>
  </data>
</root>