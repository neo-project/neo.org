<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Amount Of GAS" xml:space="preserve">
    <value>申请数量（GAS）</value>
  </data>
  <data name="Amount Of NEO" xml:space="preserve">
    <value>申请数量（NEO）</value>
  </data>
  <data name="Apply For TestNet NEO&amp;GAS" xml:space="preserve">
    <value>测试NEO&amp;GAS申请</value>
  </data>
  <data name="Company Name/Project Name" xml:space="preserve">
    <value>公司名/项目名</value>
  </data>
  <data name="Developer" xml:space="preserve">
    <value>开发者</value>
  </data>
  <data name="developers file application" xml:space="preserve">
    <value>开发者申请</value>
  </data>
  <data name="Document" xml:space="preserve">
    <value>技术文档</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>邮箱</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>首页</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>姓名</value>
  </data>
  <data name="NEO Public Key" xml:space="preserve">
    <value>NEO公钥</value>
  </data>
  <data name="NEO Smart economy" xml:space="preserve">
    <value>NEO 智能经济</value>
  </data>
  <data name="Phone Number" xml:space="preserve">
    <value>电话</value>
  </data>
  <data name="Please enter your own NEO public key. If the application succeeds, we will send Neo/GAS to a multiple signature address and tell you how to use it." xml:space="preserve">
    <value>请填写你自己的NEO公钥，如果申请成功，我们会将 NEO / GAS 发到一个多重签名的地址中，并告诉你如何使用。</value>
  </data>
  <data name="QQ" xml:space="preserve">
    <value>QQ</value>
  </data>
  <data name="Reasons For Application" xml:space="preserve">
    <value>申请理由</value>
  </data>
  <data name="Submit Application" xml:space="preserve">
    <value>提交申请</value>
  </data>
  <data name="Application reason at least 50 characters, up to 300 characters" xml:space="preserve">
    <value>申请理由至少50字，最多300字</value>
  </data>
  <data name="Please enter a valid E-mail address" xml:space="preserve">
    <value>请输入正确的邮件地址</value>
  </data>
  <data name="Please enter a valid number" xml:space="preserve">
    <value>请输入正确的数字</value>
  </data>
  <data name="Please enter a valid phone" xml:space="preserve">
    <value>请输入正确的手机号</value>
  </data>
  <data name="Please enter a valid public key" xml:space="preserve">
    <value>请输入正确的公钥</value>
  </data>
  <data name="This field is required" xml:space="preserve">
    <value>必填项</value>
  </data>
</root>